import asyncio
import time
from collections import deque
from pyrogram import Client, filters, idle

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
from dotenv import load_dotenv
import os

load_dotenv()

api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
group_ids = [int(g) for g in os.getenv("GROUP_IDS").split(",")]
my_user_id = int(os.getenv("MY_USER_ID"))

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
keywords = ["–∫—Ä–µ—Å–ª–æ", "—Å—Ç—É–ª"]

# –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
report_interval_seconds = 60
# –û—á–µ—Ä–µ–¥—å —Å—Å—ã–ª–æ–∫
links_queue = deque()

# –§–∞–π–ª –¥–ª—è –ª–æ–≥–æ–≤
log_file = "found_links.log"

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
app = Client("my_account", api_id=api_id, api_hash=api_hash)



# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ—Å—Ç—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö
# @app.on_message()
# async def debug_all(client, message):
#     print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

# @app.on_raw_update()
# async def raw_update(client, update, users, chats):
#     # This will print every raw update, including channel posts
#     print(f"[RAW UPDATE] {update}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ
def contains_keyword(text: str) -> bool:
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in keywords)

# –ó–∞–ø–∏—Å—å —Å—Å—ã–ª–∫–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª
def log_link(link: str):
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] {link}\n")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω—É–∂–Ω—ã—Ö –≥—Ä—É–ø–ø
@app.on_message(filters.chat(group_ids))
async def find_and_queue(client, message):
    text_to_check = message.text or message.caption
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_to_check}")
    print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text_to_check}")
    print(f"–ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

    if not text_to_check:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞/–ø–æ–¥–ø–∏—Å–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    if contains_keyword(text_to_check):
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {text_to_check}")
        if getattr(message.chat, "username", None):
            link = f"https://t.me/{message.chat.username}/{message.id}"
        else:
            link = f"tg://privatepost?channel={abs(message.chat.id)}&post={message.id}"

        links_queue.append(link)
        log_link(link)
        print(f"–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {link}")
    else:
        print("‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
async def send_report():
    print("–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤.")
    while True:
        if links_queue:
            links_to_send = list(links_queue)
            print(f"‚úâÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞: {len(links_to_send)} —Å—Å—ã–ª–æ–∫.")
            links_queue.clear()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫
            text_report = "\n".join(f"{idx+1}. {link}" for idx, link in enumerate(links_to_send))
            try:
                await app.send_message(my_user_id, f"ü™ë –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n{text_report}")
                print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            except Exception as e:
                print(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞: {e}")
        else:
            print("‚è≥ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await asyncio.sleep(report_interval_seconds)

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def show_monitored_groups():
    print("\nüìã –°–ª—É—à–∞–µ–º –≥—Ä—É–ø–ø—ã:")
    for group in group_ids:
        try:
            chat = await app.get_chat(group)
            title = chat.title or chat.username or "No Title"
            print(f"  - {title} (ID: {chat.id})")
        except Exception as e:
            print(f"  ‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ {group}: {e}")
    print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!\n")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    await app.start()
    print("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã
    await show_monitored_groups()
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–π —Ç–∞—Å–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤
    asyncio.create_task(send_report())
    # –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await idle()
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
    await app.stop()

if __name__ == "__main__":
    app.run(main())